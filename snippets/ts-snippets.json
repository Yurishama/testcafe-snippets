{
    "tc-type-text": {
      "prefix": "tc-type-text-then-press-tab",
      "body": [
        "await t // type a text in an input box and press tab",
        "\t.setTestSpeed(${1:0.7})",
        "\t.hover(${2:input})",
        "\t.expect(${2:input}.hasAttribute(\"disabled\")).notOk({timeout: ${4:5000}\\})",
        "\t.click(${2:input})",
        "\t.typeText(${2:input}, \"${3:john doe}\", {replace: true\\})",
        "\t.pressKey(\"tab\");"
      ],
      "description": "type a text in an input box and press tab"
    },
    "tc-copy-paste-text": {
        "prefix": "tc-copy-paste-text-then-press-tab",
        "body": [
          "await t // copy paste a text in an input box and press tab",
          "\t.setTestSpeed(${1:0.7})",
          "\t.hover(${2:input})",
          "\t.expect(${2:input}.hasAttribute(\"disabled\")).notOk({timeout: ${4:5000}\\})",
          "\t.click(${2:input})",
          "\t.typeText(${2:input}, \"${3:john doe}\", {replace: true, paste: true\\})",
          "\t.pressKey(\"tab\");"
        ],
        "description": "Copy paste a text in an input box and press tab"
      },
      "tc-select-an-option-by-content": {
        "prefix": "tc-select-an-option-by-content",
        "body": [
          "await t // select an option by its content and press tab",
          "\t.setTestSpeed(${1:0.7})",
          "\t.hover(${2:select})",
          "\t.expect(${2:select}.hasAttribute(\"disabled\")).notOk({timeout: ${4:5000}\\})",
          "\t.click(${2:select})",
          "\t.click(${2:select}",
          "\t\t.find(\"option\")",
          "\t\t.withText(\"${3:content}\")",
          "\t\t.nth(0))",
          "\t.pressKey(\"tab\");"
        ],
        "description": "Select an option by content"
      },
      "tc-select-an-option-by-exact-content": {
        "prefix": "tc-select-an-option-by-exact-content",
        "body": [
          "await t // select an option by its exact content and press tab",
          "\t.setTestSpeed(${1:0.7})",
          "\t.hover(${2:select})",
          "\t.expect(${2:select}.hasAttribute(\"disabled\")).notOk({timeout: ${4:5000}\\})",
          "\t.click(${2:select})",
          "\t.click(${2:select}",
          "\t\t.find(\"option\")",
          "\t\t.withText(new RegExp(`^${3:content}$`))",
          "\t\t.nth(0))",
          "\t.pressKey(\"tab\");"
        ],
        "description": "Select an option by exact content"
      },
      "tc-select-first-option": {
        "prefix": "tc-select-first-option",
        "body": [
          "await t // select the first option and press tab",
          "\t.setTestSpeed(${1:0.7})",
          "\t.hover(${2:select})",
          "\t.expect(${2:select}.hasAttribute(\"disabled\")).notOk({timeout: ${3:5000}\\})",
          "\t.click(${2:select})",
          "\t.click(${2:select}",
          "\t\t.find(\"option\")",
          "\t\t.nth(0))",
          "\t.pressKey(\"tab\");"
        ],
        "description": "Select first option"
      },
      "tc-select-last-option": {
        "prefix": "tc-select-last-option",
        "body": [
          "await t // select the last option and press tab",
          "\t.setTestSpeed(${1:0.7})",
          "\t.hover(${2:select})",
          "\t.expect(${2:select}.hasAttribute(\"disabled\")).notOk({timeout: ${3:5000}\\})",
          "\t.click(${2:select})",
          "\t.click(${2:select}",
          "\t\t.find(\"option\")",
          "\t\t.nth(-1))",
          "\t.pressKey(\"tab\");"
        ],
        "description": "Select last option"
      },
      "tc-navigate-to-url": {
        "prefix": "tc-navigate-to-url",
        "body": [
          "await t // navigate to url",
          "\t.navigateTo(\"${1:url}\");"
        ],
        "description": "Navigate to url"
      },
      "tc-select-a-radio-button-by-value": {
        "prefix": "tc-select-a-radio-button-by-value",
        "body": [
          "// select a radio button by it's input value",
          "const radioButtonValue = \"${1:value}\"; // the value to search", 
          "const radioButton = Selector('input[type=\"radio\"]')",
          "\t.withAttribute(\"name\", \"${2:groupName}\") // select all radio buttons within the group ${2:groupName}",
          "\t\t.filter((node) => {",
          "\t\t\tconst button = node as HTMLInputElement;",
          "\t\t\tif (button && button.value === radioButtonValue) {",
          "\t\t\t\treturn true;",
          "\t\t\t\\}",
          "\t\t\treturn false;",
          "\t\t}, {radioButtonValue\\})",
          "\t\t.nth(0);",
          "await t",
          "\t.hover(radioButton)",
          "\t.expect(radioButton.hasAttribute(\"disabled\")).notOk({timeout: ${3:5000}\\})",
          "\t.click(radioButton)",
          "\t.pressKey(\"tab\");"
        ],
        "description": "Select a radio button by it's input value"
      },
      "tc-set-window-size-to-custom-width-and-height": {
        "prefix": "tc-set-window-size-to-custom-width-and-height",
        "body": [
          "await t // set the window size",
          "\t.resizeWindow(${1:1024}, ${2:600});"
        ],
        "description": "Set Window size to custom width ad height"
      },
      "tc-maximize-window": {
        "prefix": "tc-maximize-window",
        "body": [
          "await t // set the window size to it's max size",
          "\t.maximizeWindow();"
        ],
        "description": "Maximize Window"
      },
      "tc-set-window-size-to-fit-device": {
        "prefix": "tc-set-window-size-to-fit-device",
        "body": [
          "await t // set the window size to fit specific device (see: http://viewportsizes.com/)",
          "\t.resizeWindowToFitDevice(\"${1|Galaxy Nexus,HTC One,HTC Windows Phone 8S,Huawei Ascend G510,Huawei Ascend Mate,Huawei Y300-0151,iPad,iPhone 5,iPhone 6,iPhone 6 Plus,LG G2,Microsoft Surface,Microsoft Surface Pro,Nexus 5,Nexus 7,Nokia Lumia 520,Nokia Lumia 1520,Samsung Galaxy S4 I9500,Sony VAIO Tap 20|}\", {portraitOrientation: ${2|true,false|}\\});"
        ],
        "description": "Set Window size to fit specific device"
      },
      "tc-reload-browser": {
        "prefix": "tc-reload-browser",
        "body": [
          "// you need to import {ClientFunction} from \"testcafe\";",
          "const reloadBrowser = ClientFunction(() => window.location.reload(true));",
          "await reloadBrowser();"
        ],
        "description": "Reload Browser"
      },
      "tc-import": {
        "prefix": "tc-import",
        "body": [
          "import \"testcafe\";",
          "import {ClientFunction, Selector\\} from \"testcafe\";"
        ],
        "description": "TestCafe Import Statements"
      },
      "tc-fixture-with-start-page": {
        "prefix": "tc-fixture-with-start-page",
        "body": [
          "fixture(\"${1:My Fixture}\")",
          "\t.page(\"${2|http://myurl,http://devexpress.github.io/testcafe/example|}\");"
        ],
        "description": "TestCafe Fixture with a Start Page"
      },
      "tc-test": {
        "prefix": "tc-test",
        "body": [
          "test(\"${1:My Test}\", async (t) => {",
          "\t$0",  
          "\\});",
          ""
        ],
        "description": "TestCafe Test"
      },
      "tc-pause-test-for-client-side-debugging": {
        "prefix": "tc-pause-test-for-client-side-debugging",
        "body": [
          "await t.debug();",
          ""
        ],
        "description": "Pause test for Client-Side Debugging"
      },
      "tc-fixture-with-start-page-and-hooks": {
        "prefix": "tc-fixture-with-start-page-and-hooks",
        "body": [
          "fixture(\"${1:My Fixture}\")",
          "\t.page(\"${2|http://myurl,http://devexpress.github.io/testcafe/example|}\")",
          "\t.before(async (ctx) => {",
          "\t\t// inject in the fixture context any object you want to share beetween tests",
          "\t\tctx.${3:config} = ${3:config};",
          "\t\\})",
          "\t.beforeEach(async (t) => {",
          "\t\t// inject in the test context any input data needed to run the test",
          "\t\tt.ctx.${4:inputData} = ${4:inputData};",
          "\t\t// put here all actions that are common to all tests",
          "\t\t$0",
          "\t\\});",
          ""
        ],
        "description": "TestCafe Fixture with a Start Page and Hooks"
      },
      "tc-test-with-hooks": {
        "prefix": "tc-test-with-hooks",
        "body": [
          "test(\"${1:My Test}\", async (t) => {",
          "\t$0",  
          "\t\\})",
          "\t.before(async (t) => {",
          "\t\t// inject in the test context any input data needed to run this specific test",
          "\t\tt.ctx.${2:inputData} = ${2:inputData};",
          "\t\\})",
          "\t.after(async (t) => {",
          "\t\t// test finalization code",
          "\t\\});",
          ""
        ],
        "description": "TestCafe Test with hooks"
      },
      "tc-get-selected-option": {
        "prefix": "tc-get-selected-option",
        "body": [
          "// get the selected option",
          "const select = Selector(\"select#${1|my-id,preferred-interface|}\");",
          "const selectedOption = select",
          "\t\t.find(\"option\")",
          "\t\t\t.filter((node) => {",
          "\t\t\t\tconst option = node as HTMLOptionElement;",
          "\t\t\t\tif (option && option.selected) {",
          "\t\t\t\t\treturn true;",
          "\t\t\t\t\\}",
          "\t\t\t\treturn false;",
          "\t\t\t\\})",
          "\t\t\t.nth(0);",
          "const selectedOptionContent = await selectedOption.textContent;",
          ""
        ],
        "description": "Get the selected option of a select element"
      },
      "tc-iterate-over-selected-checkboxes": {
        "prefix": "tc-iterate-over-selected-checkboxes",
        "body": [
          "// iterate over selected checkboxes",
          "const selectedCheckboxes = Selector('input[type=\"checkbox\"]')",
          "\t// select all checboxes whose name value is in a set of predefined values",
          "\t.withAttribute(\"name\", /${1:custom-name}|remote|re-using|background|CI|analysis/)",
          "\t\t.filter((node) => {",
          "\t\t\tconst checkbox = node as HTMLInputElement;",
          "\t\t\tif (checkbox && checkbox.checked) {",
          "\t\t\t\treturn true;",
          "\t\t\t\\}",
          "\t\t\treturn false;",
          "\t\t\\});",
          "const checkedCount = await selectedCheckboxes.count;",
          "const checkedIds = [];",
          "for (let i = 0; i < checkedCount; i++) {",
          "\tcheckedIds.push(await selectedCheckboxes.nth(i).id);",
          "\\}",
          "// now you can make your business check from the checkedIds array",
          "$0"
        ],
        "description": "Iterate over selected Checkboxes"
      },
      "tc-selector-with-options": {
        "prefix": "tc-selector-with-options",
        "body": [
          "const ${1:mySelector} = Selector('${2:input#developer-name[type=\"text\"]'})",
          "\t.with({timeout: ${3:5000}, visibilityCheck: true})",
          "\t.nth(0);",
          ""
        ],
        "description": "Create a Selector with explicit visibility check and timeout"
      },
      "tc-remove-text": {
        "prefix": "tc-remove-text-then-press-tab",
        "body": [
          "await t // remove the text present in an input box and press tab",
          "\t.setTestSpeed(${1:0.7})",
          "\t.hover(${2:input})",
          "\t.expect(${2:input}.hasAttribute(\"disabled\")).notOk({timeout: ${3:5000}\\})",
          "\t.click(${2:input})",
          "\t.pressKey(\"ctrl+a delete\")",
          "\t.pressKey(\"tab\");"
        ],
        "description": "remove the text present in an input box and press tab"
      },
      "tc-wait-for-a-selector-to-disappear": {
        "prefix": "tc-wait-for-a-selector-to-disappear",
        "body": [
          "// wait for a selector to disappear",
          "const ${1:spinner} = Selector(\"${2:div.loading}\");",
          "await t",
          "\t.expect(${1:spinner}.exists).notOk({timeout: ${3:5000}\\});"
        ],
        "description": "Wait for a selector to disappear"
      },
      "tc-wait-for-a-selector-to-appear": {
        "prefix": "tc-wait-for-a-selector-to-appear",
        "body": [
          "// wait for a selector to appear",
          "const ${1:selector} = Selector(\"${2:div.popup}\")",
          "\t.with({visibilityCheck: true})",
          "\t.nth(0);",
          "await t",
          "\t.expect(${1:selector}.exists).ok({timeout: ${3:5000}\\});"
        ],
        "description": "Wait for a selector to appear"
      },
      "tc-client-side-ajax-request": {
        "prefix": "tc-client-side-ajax-request",
        "body": [
          "// Client-side ajax request",
          "// client-side function used for sending the ajax request",
          "const send = ClientFunction( (req: any) => {",
          "\treturn new Promise( (resolve) => {",
          "\t\tconst json: string = JSON.stringify(req);",
          "\t\tconst $ = (window as any).jQuery;",
          "\t\t$.ajax({",
          "\t\t\tcontentType: \"application/json; charset=utf-8\",",
          "\t\t\tdata: json,",
          "\t\t\tdataType: \"json\",",
          "\t\t\ttype: \"POST\",",
          "\t\t\turl: \"https://reqres.in/api/users\"",
          "\t\t\\})",
          "\t\t.always( (httpResponse: XMLHttpRequest) => {",
          "\t\t\tif (httpResponse && httpResponse.getAllResponseHeaders === undefined) {",
          "\t\t\t\tresolve(httpResponse);",
          "\t\t\t\treturn;",
          "\t\t\t\\}",
          "\t\t\tresolve({",
          "\t\t\t\tresponseHeaders: httpResponse.getAllResponseHeaders(),",
          "\t\t\t\tresponseText: httpResponse.responseText,",
          "\t\t\t\tstatus: httpResponse.status,",
          "\t\t\t\tstatusText: httpResponse.statusText,",
          "\t\t\t});",
          "\t\t});",
          "\t});",
          "\\});",
          "// request object that will be posted to the backend server",
          "const request = {",
          "\tfirstName: \"john\",",
          "\tlastName: \"Doe\",",
          "\trequestTime: Date(),",
          "\\};",
          "// send request and get response",
          "const response: XMLHttpRequest | any = await send(request);"
        ],
        "description": "Client-side ajax request"
      },
      "tc-angularjs-enable-debug": {
        "prefix": "tc-angularjs-enable-debug",
        "body": [
          "// enable Angular debug info",
          "const reloadWithDebugInfo = ClientFunction(() => {",
          "\tconst angular = (window as any).angular;",
          "\tif (angular) {",
          "\t\tangular.reloadWithDebugInfo();",
          "\t}",
          "});",
          "await reloadWithDebugInfo();"
        ],
        "description": "Enable Angular Debug Info"
      }
}
