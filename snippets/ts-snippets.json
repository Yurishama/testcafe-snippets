{
    "tc-type-text": {
      "prefix": "tc-type-text-then-press-tab",
      "body": [
        "await t // type a text in an input box and press tab",
        "\t.setTestSpeed(${1:0.7})",
        "\t.expect(${2:input}.hasAttribute(\"disabled\")).notOk()",
        "\t.click(${2:input})",
        "\t.typeText(${2:input}, \"${3:john doe}\", {replace: true\\})",
        "\t.pressKey(\"tab\");"
      ],
      "description": "type a text in an input box and press tab"
    },
    "tc-copy-paste-text": {
        "prefix": "tc-copy-paste-text-then-press-tab",
        "body": [
          "await t // copy paste a text in an input box and press tab",
          "\t.setTestSpeed(${1:0.7})",
          "\t.expect(${2:input}.hasAttribute(\"disabled\")).notOk()",
          "\t.click(${2:input})",
          "\t.typeText(${2:input}, \"${3:john doe}\", {replace: true, paste: true\\})",
          "\t.pressKey(\"tab\");"
        ],
        "description": "Copy paste a text in an input box and press tab"
      },
      "tc-select-an-option-by-content": {
        "prefix": "tc-select-an-option-by-content",
        "body": [
          "await t // select an option by its content and press tab",
          "\t.setTestSpeed(${1:0.7})",
          "\t.expect(${2:select}.hasAttribute(\"disabled\")).notOk()",
          "\t.click(${2:select})",
          "\t.click(${2:select}",
          "\t\t.find(\"option\")",
          "\t\t.withText(\"${3:content}\")",
          "\t\t.nth(0))",
          "\t.pressKey(\"tab\");"
        ],
        "description": "Select an option by content"
      },
      "tc-select-first-option": {
        "prefix": "tc-select-first-option",
        "body": [
          "await t // select the first option and press tab",
          "\t.setTestSpeed(${1:0.7})",
          "\t.expect(${2:select}.hasAttribute(\"disabled\")).notOk()",
          "\t.click(${2:select})",
          "\t.click(${2:select}",
          "\t\t.find(\"option\")",
          "\t\t.nth(0))",
          "\t.pressKey(\"tab\");"
        ],
        "description": "Select first option"
      },
      "tc-select-last-option": {
        "prefix": "tc-select-last-option",
        "body": [
          "await t // select the last option and press tab",
          "\t.setTestSpeed(${1:0.7})",
          "\t.expect(${2:select}.hasAttribute(\"disabled\")).notOk()",
          "\t.click(${2:select})",
          "\t.click(${2:select}",
          "\t\t.find(\"option\")",
          "\t\t.nth(-1))",
          "\t.pressKey(\"tab\");"
        ],
        "description": "Select last option"
      },
      "tc-navigate-to-url": {
        "prefix": "tc-navigate-to-url",
        "body": [
          "await t // navigate to url",
          "\t.navigateTo(\"${url}\");"
        ],
        "description": "Navigate to url"
      },
      "tc-select-a-radio-button-by-value": {
        "prefix": "tc-select-a-radio-button-by-value",
        "body": [
          "// select a radio button by it's input value",
          "const radioButtonValue = \"${1:value}\"; // the value to search", 
          "const radioButton = Selector('input[type=\"radio\"]')",
          "\t.withAttribute(\"name\", \"${2:groupName}\") // select all radio buttons within the group ${2:groupName}",
          "\t\t.filter((node) => {",
          "\t\t\tconst button = node as HTMLInputElement;",
          "\t\t\tif (button && button.value === radioButtonValue) {",
          "\t\t\t\treturn true;",
          "\t\t\t\\}",
          "\t\t\treturn false;",
          "\t\t}, {radioButtonValue})",
          "\t\t.nth(0);",
          "await t",
          "\t.expect(radioButton.hasAttribute(\"disabled\")).notOk()",
          "\t.click(radioButton)",
          "\t.pressKey(\"tab\");"
        ],
        "description": "Select a radio button by it's input value"
      }
}


